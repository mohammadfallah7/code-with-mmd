generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id               String            @id @default(cuid())
  name             String?
  email            String            @unique
  emailVerified    DateTime?
  image            String?
  role             Role              @default(USER)
  accounts         Account[]
  solvedChallenges SolvedChallenge[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Category {
  id         String      @id @default(cuid())
  name       String
  challenges Challenge[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Challenge {
  id          String            @id @default(cuid())
  title       String
  description String
  starterCode String
  categoryId  String
  category    Category          @relation(fields: [categoryId], references: [id])
  solvedBy    SolvedChallenge[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SolvedChallenge {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  challengeId String
  Challenge   Challenge @relation(fields: [challengeId], references: [id])
  solvedAt    DateTime  @default(now())

  @@unique([userId, challengeId])
}
